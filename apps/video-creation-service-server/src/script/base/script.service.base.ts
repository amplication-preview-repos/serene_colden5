/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Script as PrismaScript } from "@prisma/client";

export class ScriptServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ScriptCountArgs, "select">): Promise<number> {
    return this.prisma.script.count(args);
  }

  async scripts<T extends Prisma.ScriptFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScriptFindManyArgs>
  ): Promise<PrismaScript[]> {
    return this.prisma.script.findMany<Prisma.ScriptFindManyArgs>(args);
  }
  async script<T extends Prisma.ScriptFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScriptFindUniqueArgs>
  ): Promise<PrismaScript | null> {
    return this.prisma.script.findUnique(args);
  }
  async createScript<T extends Prisma.ScriptCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScriptCreateArgs>
  ): Promise<PrismaScript> {
    return this.prisma.script.create<T>(args);
  }
  async updateScript<T extends Prisma.ScriptUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScriptUpdateArgs>
  ): Promise<PrismaScript> {
    return this.prisma.script.update<T>(args);
  }
  async deleteScript<T extends Prisma.ScriptDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScriptDeleteArgs>
  ): Promise<PrismaScript> {
    return this.prisma.script.delete(args);
  }
}
