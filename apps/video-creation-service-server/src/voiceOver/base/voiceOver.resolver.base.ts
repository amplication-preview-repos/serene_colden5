/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { VoiceOver } from "./VoiceOver";
import { VoiceOverCountArgs } from "./VoiceOverCountArgs";
import { VoiceOverFindManyArgs } from "./VoiceOverFindManyArgs";
import { VoiceOverFindUniqueArgs } from "./VoiceOverFindUniqueArgs";
import { CreateVoiceOverArgs } from "./CreateVoiceOverArgs";
import { UpdateVoiceOverArgs } from "./UpdateVoiceOverArgs";
import { DeleteVoiceOverArgs } from "./DeleteVoiceOverArgs";
import { VoiceOverService } from "../voiceOver.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => VoiceOver)
export class VoiceOverResolverBase {
  constructor(
    protected readonly service: VoiceOverService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "VoiceOver",
    action: "read",
    possession: "any",
  })
  async _voiceOversMeta(
    @graphql.Args() args: VoiceOverCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [VoiceOver])
  @nestAccessControl.UseRoles({
    resource: "VoiceOver",
    action: "read",
    possession: "any",
  })
  async voiceOvers(
    @graphql.Args() args: VoiceOverFindManyArgs
  ): Promise<VoiceOver[]> {
    return this.service.voiceOvers(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => VoiceOver, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "VoiceOver",
    action: "read",
    possession: "own",
  })
  async voiceOver(
    @graphql.Args() args: VoiceOverFindUniqueArgs
  ): Promise<VoiceOver | null> {
    const result = await this.service.voiceOver(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => VoiceOver)
  @nestAccessControl.UseRoles({
    resource: "VoiceOver",
    action: "create",
    possession: "any",
  })
  async createVoiceOver(
    @graphql.Args() args: CreateVoiceOverArgs
  ): Promise<VoiceOver> {
    return await this.service.createVoiceOver({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => VoiceOver)
  @nestAccessControl.UseRoles({
    resource: "VoiceOver",
    action: "update",
    possession: "any",
  })
  async updateVoiceOver(
    @graphql.Args() args: UpdateVoiceOverArgs
  ): Promise<VoiceOver | null> {
    try {
      return await this.service.updateVoiceOver({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => VoiceOver)
  @nestAccessControl.UseRoles({
    resource: "VoiceOver",
    action: "delete",
    possession: "any",
  })
  async deleteVoiceOver(
    @graphql.Args() args: DeleteVoiceOverArgs
  ): Promise<VoiceOver | null> {
    try {
      return await this.service.deleteVoiceOver(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
