/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SoundEffect } from "./SoundEffect";
import { SoundEffectCountArgs } from "./SoundEffectCountArgs";
import { SoundEffectFindManyArgs } from "./SoundEffectFindManyArgs";
import { SoundEffectFindUniqueArgs } from "./SoundEffectFindUniqueArgs";
import { CreateSoundEffectArgs } from "./CreateSoundEffectArgs";
import { UpdateSoundEffectArgs } from "./UpdateSoundEffectArgs";
import { DeleteSoundEffectArgs } from "./DeleteSoundEffectArgs";
import { SoundEffectService } from "../soundEffect.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SoundEffect)
export class SoundEffectResolverBase {
  constructor(
    protected readonly service: SoundEffectService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SoundEffect",
    action: "read",
    possession: "any",
  })
  async _soundEffectsMeta(
    @graphql.Args() args: SoundEffectCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SoundEffect])
  @nestAccessControl.UseRoles({
    resource: "SoundEffect",
    action: "read",
    possession: "any",
  })
  async soundEffects(
    @graphql.Args() args: SoundEffectFindManyArgs
  ): Promise<SoundEffect[]> {
    return this.service.soundEffects(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SoundEffect, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SoundEffect",
    action: "read",
    possession: "own",
  })
  async soundEffect(
    @graphql.Args() args: SoundEffectFindUniqueArgs
  ): Promise<SoundEffect | null> {
    const result = await this.service.soundEffect(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SoundEffect)
  @nestAccessControl.UseRoles({
    resource: "SoundEffect",
    action: "create",
    possession: "any",
  })
  async createSoundEffect(
    @graphql.Args() args: CreateSoundEffectArgs
  ): Promise<SoundEffect> {
    return await this.service.createSoundEffect({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SoundEffect)
  @nestAccessControl.UseRoles({
    resource: "SoundEffect",
    action: "update",
    possession: "any",
  })
  async updateSoundEffect(
    @graphql.Args() args: UpdateSoundEffectArgs
  ): Promise<SoundEffect | null> {
    try {
      return await this.service.updateSoundEffect({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SoundEffect)
  @nestAccessControl.UseRoles({
    resource: "SoundEffect",
    action: "delete",
    possession: "any",
  })
  async deleteSoundEffect(
    @graphql.Args() args: DeleteSoundEffectArgs
  ): Promise<SoundEffect | null> {
    try {
      return await this.service.deleteSoundEffect(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
