/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, SoundEffect as PrismaSoundEffect } from "@prisma/client";

export class SoundEffectServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SoundEffectCountArgs, "select">
  ): Promise<number> {
    return this.prisma.soundEffect.count(args);
  }

  async soundEffects<T extends Prisma.SoundEffectFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SoundEffectFindManyArgs>
  ): Promise<PrismaSoundEffect[]> {
    return this.prisma.soundEffect.findMany<Prisma.SoundEffectFindManyArgs>(
      args
    );
  }
  async soundEffect<T extends Prisma.SoundEffectFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SoundEffectFindUniqueArgs>
  ): Promise<PrismaSoundEffect | null> {
    return this.prisma.soundEffect.findUnique(args);
  }
  async createSoundEffect<T extends Prisma.SoundEffectCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SoundEffectCreateArgs>
  ): Promise<PrismaSoundEffect> {
    return this.prisma.soundEffect.create<T>(args);
  }
  async updateSoundEffect<T extends Prisma.SoundEffectUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SoundEffectUpdateArgs>
  ): Promise<PrismaSoundEffect> {
    return this.prisma.soundEffect.update<T>(args);
  }
  async deleteSoundEffect<T extends Prisma.SoundEffectDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SoundEffectDeleteArgs>
  ): Promise<PrismaSoundEffect> {
    return this.prisma.soundEffect.delete(args);
  }
}
