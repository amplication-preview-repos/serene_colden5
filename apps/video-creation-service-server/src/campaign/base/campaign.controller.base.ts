/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { CampaignService } from "../campaign.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CampaignCreateInput } from "./CampaignCreateInput";
import { Campaign } from "./Campaign";
import { CampaignFindManyArgs } from "./CampaignFindManyArgs";
import { CampaignWhereUniqueInput } from "./CampaignWhereUniqueInput";
import { CampaignUpdateInput } from "./CampaignUpdateInput";
import { ProjectFindManyArgs } from "../../project/base/ProjectFindManyArgs";
import { Project } from "../../project/base/Project";
import { ProjectWhereUniqueInput } from "../../project/base/ProjectWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class CampaignControllerBase {
  constructor(
    protected readonly service: CampaignService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Campaign })
  @nestAccessControl.UseRoles({
    resource: "Campaign",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createCampaign(
    @common.Body() data: CampaignCreateInput
  ): Promise<Campaign> {
    return await this.service.createCampaign({
      data: data,
      select: {
        aspectRatio: true,
        backgroundMusicIncluded: true,
        campaignLanguage: true,
        campaignName: true,
        campaignNiche: true,
        campaignTone: true,
        campaignTopic: true,
        campaignVoice: true,
        createdAt: true,
        id: true,
        includeBackgroundMusic: true,
        includeSoundEffects: true,
        language: true,
        name: true,
        niche: true,
        socialAccounts: true,
        socialChannels: true,
        soundEffectsIncluded: true,
        tone: true,
        topic: true,
        updatedAt: true,
        videoAspectRatio: true,
        videoLength: true,
        videoLengthDuration: true,
        voice: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Campaign] })
  @ApiNestedQuery(CampaignFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Campaign",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async campaigns(@common.Req() request: Request): Promise<Campaign[]> {
    const args = plainToClass(CampaignFindManyArgs, request.query);
    return this.service.campaigns({
      ...args,
      select: {
        aspectRatio: true,
        backgroundMusicIncluded: true,
        campaignLanguage: true,
        campaignName: true,
        campaignNiche: true,
        campaignTone: true,
        campaignTopic: true,
        campaignVoice: true,
        createdAt: true,
        id: true,
        includeBackgroundMusic: true,
        includeSoundEffects: true,
        language: true,
        name: true,
        niche: true,
        socialAccounts: true,
        socialChannels: true,
        soundEffectsIncluded: true,
        tone: true,
        topic: true,
        updatedAt: true,
        videoAspectRatio: true,
        videoLength: true,
        videoLengthDuration: true,
        voice: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Campaign })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Campaign",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async campaign(
    @common.Param() params: CampaignWhereUniqueInput
  ): Promise<Campaign | null> {
    const result = await this.service.campaign({
      where: params,
      select: {
        aspectRatio: true,
        backgroundMusicIncluded: true,
        campaignLanguage: true,
        campaignName: true,
        campaignNiche: true,
        campaignTone: true,
        campaignTopic: true,
        campaignVoice: true,
        createdAt: true,
        id: true,
        includeBackgroundMusic: true,
        includeSoundEffects: true,
        language: true,
        name: true,
        niche: true,
        socialAccounts: true,
        socialChannels: true,
        soundEffectsIncluded: true,
        tone: true,
        topic: true,
        updatedAt: true,
        videoAspectRatio: true,
        videoLength: true,
        videoLengthDuration: true,
        voice: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Campaign })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Campaign",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateCampaign(
    @common.Param() params: CampaignWhereUniqueInput,
    @common.Body() data: CampaignUpdateInput
  ): Promise<Campaign | null> {
    try {
      return await this.service.updateCampaign({
        where: params,
        data: data,
        select: {
          aspectRatio: true,
          backgroundMusicIncluded: true,
          campaignLanguage: true,
          campaignName: true,
          campaignNiche: true,
          campaignTone: true,
          campaignTopic: true,
          campaignVoice: true,
          createdAt: true,
          id: true,
          includeBackgroundMusic: true,
          includeSoundEffects: true,
          language: true,
          name: true,
          niche: true,
          socialAccounts: true,
          socialChannels: true,
          soundEffectsIncluded: true,
          tone: true,
          topic: true,
          updatedAt: true,
          videoAspectRatio: true,
          videoLength: true,
          videoLengthDuration: true,
          voice: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Campaign })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Campaign",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteCampaign(
    @common.Param() params: CampaignWhereUniqueInput
  ): Promise<Campaign | null> {
    try {
      return await this.service.deleteCampaign({
        where: params,
        select: {
          aspectRatio: true,
          backgroundMusicIncluded: true,
          campaignLanguage: true,
          campaignName: true,
          campaignNiche: true,
          campaignTone: true,
          campaignTopic: true,
          campaignVoice: true,
          createdAt: true,
          id: true,
          includeBackgroundMusic: true,
          includeSoundEffects: true,
          language: true,
          name: true,
          niche: true,
          socialAccounts: true,
          socialChannels: true,
          soundEffectsIncluded: true,
          tone: true,
          topic: true,
          updatedAt: true,
          videoAspectRatio: true,
          videoLength: true,
          videoLengthDuration: true,
          voice: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/projects")
  @ApiNestedQuery(ProjectFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Project",
    action: "read",
    possession: "any",
  })
  async findProjects(
    @common.Req() request: Request,
    @common.Param() params: CampaignWhereUniqueInput
  ): Promise<Project[]> {
    const query = plainToClass(ProjectFindManyArgs, request.query);
    const results = await this.service.findProjects(params.id, {
      ...query,
      select: {
        campaign: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        id: true,
        status: true,
        title: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/projects")
  @nestAccessControl.UseRoles({
    resource: "Campaign",
    action: "update",
    possession: "any",
  })
  async connectProjects(
    @common.Param() params: CampaignWhereUniqueInput,
    @common.Body() body: ProjectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      projects: {
        connect: body,
      },
    };
    await this.service.updateCampaign({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/projects")
  @nestAccessControl.UseRoles({
    resource: "Campaign",
    action: "update",
    possession: "any",
  })
  async updateProjects(
    @common.Param() params: CampaignWhereUniqueInput,
    @common.Body() body: ProjectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      projects: {
        set: body,
      },
    };
    await this.service.updateCampaign({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/projects")
  @nestAccessControl.UseRoles({
    resource: "Campaign",
    action: "update",
    possession: "any",
  })
  async disconnectProjects(
    @common.Param() params: CampaignWhereUniqueInput,
    @common.Body() body: ProjectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      projects: {
        disconnect: body,
      },
    };
    await this.service.updateCampaign({
      where: params,
      data,
      select: { id: true },
    });
  }
}
