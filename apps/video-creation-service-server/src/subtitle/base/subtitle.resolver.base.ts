/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Subtitle } from "./Subtitle";
import { SubtitleCountArgs } from "./SubtitleCountArgs";
import { SubtitleFindManyArgs } from "./SubtitleFindManyArgs";
import { SubtitleFindUniqueArgs } from "./SubtitleFindUniqueArgs";
import { CreateSubtitleArgs } from "./CreateSubtitleArgs";
import { UpdateSubtitleArgs } from "./UpdateSubtitleArgs";
import { DeleteSubtitleArgs } from "./DeleteSubtitleArgs";
import { SubtitleService } from "../subtitle.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Subtitle)
export class SubtitleResolverBase {
  constructor(
    protected readonly service: SubtitleService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Subtitle",
    action: "read",
    possession: "any",
  })
  async _subtitlesMeta(
    @graphql.Args() args: SubtitleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Subtitle])
  @nestAccessControl.UseRoles({
    resource: "Subtitle",
    action: "read",
    possession: "any",
  })
  async subtitles(
    @graphql.Args() args: SubtitleFindManyArgs
  ): Promise<Subtitle[]> {
    return this.service.subtitles(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Subtitle, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Subtitle",
    action: "read",
    possession: "own",
  })
  async subtitle(
    @graphql.Args() args: SubtitleFindUniqueArgs
  ): Promise<Subtitle | null> {
    const result = await this.service.subtitle(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Subtitle)
  @nestAccessControl.UseRoles({
    resource: "Subtitle",
    action: "create",
    possession: "any",
  })
  async createSubtitle(
    @graphql.Args() args: CreateSubtitleArgs
  ): Promise<Subtitle> {
    return await this.service.createSubtitle({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Subtitle)
  @nestAccessControl.UseRoles({
    resource: "Subtitle",
    action: "update",
    possession: "any",
  })
  async updateSubtitle(
    @graphql.Args() args: UpdateSubtitleArgs
  ): Promise<Subtitle | null> {
    try {
      return await this.service.updateSubtitle({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Subtitle)
  @nestAccessControl.UseRoles({
    resource: "Subtitle",
    action: "delete",
    possession: "any",
  })
  async deleteSubtitle(
    @graphql.Args() args: DeleteSubtitleArgs
  ): Promise<Subtitle | null> {
    try {
      return await this.service.deleteSubtitle(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
