/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Music as PrismaMusic } from "@prisma/client";

export class MusicServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.MusicCountArgs, "select">): Promise<number> {
    return this.prisma.music.count(args);
  }

  async musicItems<T extends Prisma.MusicFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MusicFindManyArgs>
  ): Promise<PrismaMusic[]> {
    return this.prisma.music.findMany<Prisma.MusicFindManyArgs>(args);
  }
  async music<T extends Prisma.MusicFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MusicFindUniqueArgs>
  ): Promise<PrismaMusic | null> {
    return this.prisma.music.findUnique(args);
  }
  async createMusic<T extends Prisma.MusicCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MusicCreateArgs>
  ): Promise<PrismaMusic> {
    return this.prisma.music.create<T>(args);
  }
  async updateMusic<T extends Prisma.MusicUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MusicUpdateArgs>
  ): Promise<PrismaMusic> {
    return this.prisma.music.update<T>(args);
  }
  async deleteMusic<T extends Prisma.MusicDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MusicDeleteArgs>
  ): Promise<PrismaMusic> {
    return this.prisma.music.delete(args);
  }
}
