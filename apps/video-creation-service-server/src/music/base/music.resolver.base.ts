/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Music } from "./Music";
import { MusicCountArgs } from "./MusicCountArgs";
import { MusicFindManyArgs } from "./MusicFindManyArgs";
import { MusicFindUniqueArgs } from "./MusicFindUniqueArgs";
import { CreateMusicArgs } from "./CreateMusicArgs";
import { UpdateMusicArgs } from "./UpdateMusicArgs";
import { DeleteMusicArgs } from "./DeleteMusicArgs";
import { MusicService } from "../music.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Music)
export class MusicResolverBase {
  constructor(
    protected readonly service: MusicService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Music",
    action: "read",
    possession: "any",
  })
  async _musicItemsMeta(
    @graphql.Args() args: MusicCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Music])
  @nestAccessControl.UseRoles({
    resource: "Music",
    action: "read",
    possession: "any",
  })
  async musicItems(@graphql.Args() args: MusicFindManyArgs): Promise<Music[]> {
    return this.service.musicItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Music, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Music",
    action: "read",
    possession: "own",
  })
  async music(
    @graphql.Args() args: MusicFindUniqueArgs
  ): Promise<Music | null> {
    const result = await this.service.music(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Music)
  @nestAccessControl.UseRoles({
    resource: "Music",
    action: "create",
    possession: "any",
  })
  async createMusic(@graphql.Args() args: CreateMusicArgs): Promise<Music> {
    return await this.service.createMusic({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Music)
  @nestAccessControl.UseRoles({
    resource: "Music",
    action: "update",
    possession: "any",
  })
  async updateMusic(
    @graphql.Args() args: UpdateMusicArgs
  ): Promise<Music | null> {
    try {
      return await this.service.updateMusic({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Music)
  @nestAccessControl.UseRoles({
    resource: "Music",
    action: "delete",
    possession: "any",
  })
  async deleteMusic(
    @graphql.Args() args: DeleteMusicArgs
  ): Promise<Music | null> {
    try {
      return await this.service.deleteMusic(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
