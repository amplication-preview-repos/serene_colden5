/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Visual } from "./Visual";
import { VisualCountArgs } from "./VisualCountArgs";
import { VisualFindManyArgs } from "./VisualFindManyArgs";
import { VisualFindUniqueArgs } from "./VisualFindUniqueArgs";
import { CreateVisualArgs } from "./CreateVisualArgs";
import { UpdateVisualArgs } from "./UpdateVisualArgs";
import { DeleteVisualArgs } from "./DeleteVisualArgs";
import { VisualService } from "../visual.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Visual)
export class VisualResolverBase {
  constructor(
    protected readonly service: VisualService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Visual",
    action: "read",
    possession: "any",
  })
  async _visualsMeta(
    @graphql.Args() args: VisualCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Visual])
  @nestAccessControl.UseRoles({
    resource: "Visual",
    action: "read",
    possession: "any",
  })
  async visuals(@graphql.Args() args: VisualFindManyArgs): Promise<Visual[]> {
    return this.service.visuals(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Visual, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Visual",
    action: "read",
    possession: "own",
  })
  async visual(
    @graphql.Args() args: VisualFindUniqueArgs
  ): Promise<Visual | null> {
    const result = await this.service.visual(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Visual)
  @nestAccessControl.UseRoles({
    resource: "Visual",
    action: "create",
    possession: "any",
  })
  async createVisual(@graphql.Args() args: CreateVisualArgs): Promise<Visual> {
    return await this.service.createVisual({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Visual)
  @nestAccessControl.UseRoles({
    resource: "Visual",
    action: "update",
    possession: "any",
  })
  async updateVisual(
    @graphql.Args() args: UpdateVisualArgs
  ): Promise<Visual | null> {
    try {
      return await this.service.updateVisual({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Visual)
  @nestAccessControl.UseRoles({
    resource: "Visual",
    action: "delete",
    possession: "any",
  })
  async deleteVisual(
    @graphql.Args() args: DeleteVisualArgs
  ): Promise<Visual | null> {
    try {
      return await this.service.deleteVisual(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
