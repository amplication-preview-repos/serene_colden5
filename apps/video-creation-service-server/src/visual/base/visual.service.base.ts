/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Visual as PrismaVisual } from "@prisma/client";

export class VisualServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.VisualCountArgs, "select">): Promise<number> {
    return this.prisma.visual.count(args);
  }

  async visuals<T extends Prisma.VisualFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.VisualFindManyArgs>
  ): Promise<PrismaVisual[]> {
    return this.prisma.visual.findMany<Prisma.VisualFindManyArgs>(args);
  }
  async visual<T extends Prisma.VisualFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.VisualFindUniqueArgs>
  ): Promise<PrismaVisual | null> {
    return this.prisma.visual.findUnique(args);
  }
  async createVisual<T extends Prisma.VisualCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.VisualCreateArgs>
  ): Promise<PrismaVisual> {
    return this.prisma.visual.create<T>(args);
  }
  async updateVisual<T extends Prisma.VisualUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.VisualUpdateArgs>
  ): Promise<PrismaVisual> {
    return this.prisma.visual.update<T>(args);
  }
  async deleteVisual<T extends Prisma.VisualDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.VisualDeleteArgs>
  ): Promise<PrismaVisual> {
    return this.prisma.visual.delete(args);
  }
}
